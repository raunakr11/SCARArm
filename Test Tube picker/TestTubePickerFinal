//Here the robot does the homing once it is connected to the power source
//We can control the robot manually in this case. We have the 6 containers labeled as A, B, C, D, E, and F. 
//The gripper can be opened by pressing O for opening and P for closing.

#include <AccelStepper.h>
#include <Servo.h>
#include <math.h>

unsigned long startTime;
unsigned long endTime;

#define LIMIT_SWITCH_PIN1 10

#define LIMIT_SWITCH_PIN2 9
#define LIMIT_SWITCH_PIN3 11
#define LIMIT_SWITCH_PIN4 A3

// Define the stepper motors and the pins they will use
AccelStepper stepperJ1(1, 3, 6);  // (Type:driver, STEP, DIR)
AccelStepper stepperJ2(1, 4, 7);
AccelStepper stepperJ3(1, 2, 5);
AccelStepper stepperJ4(1, 12, 13);

Servo gripperServo;

double x = 10.0;
double y = 10.0;
double L1 = 228;    // L1 = 228mm
double L2 = 136.5;  // L2 = 136.5mm
double theta1, theta2, phi, z;

int stepperJ1Position, stepperJ2Position, stepperJ3Position, stepper4Position;

const float theta1AngleToSteps = 44.444444;
const float theta2AngleToSteps = 35.555555;
const float phiAngleToSteps = 10;
const float zDistanceToSteps = 100;

void homing() {
  //homeJ4(); This is redundant as the end effector is aligned with the axis of rotation 
  homeJ2();
  homeJ3();
  homeJ1();
}

void homeJ3() {

  pinMode(LIMIT_SWITCH_PIN3, INPUT_PULLUP);

  stepperJ3.setMaxSpeed(5000);
  stepperJ3.setAcceleration(1000);
  stepperJ3.setSpeed(1500);

  while (digitalRead(LIMIT_SWITCH_PIN3) == LOW) 
  {
    stepperJ3.runSpeed();
    if (digitalRead(LIMIT_SWITCH_PIN3) == HIGH) break;
  }

  stepperJ3.setSpeed(-1000);
  stepperJ3.move(-2000);

  while (stepperJ3.distanceToGo() != 0) 
  {
    stepperJ3.runToPosition();
  }
  stepperJ3.setCurrentPosition(0);
}

void homeJ1() { 
 //to maintain balance, this joint is moved after homing
  pinMode(LIMIT_SWITCH_PIN2, INPUT_PULLUP);
  stepperJ2.setMaxSpeed(5000);
  stepperJ2.setSpeed(1500);
  stepperJ2.moveTo(-4250);
  while (stepperJ2.distanceToGo() != 0)
  {
    stepperJ2.runToPosition();
  }

  pinMode(LIMIT_SWITCH_PIN1, INPUT_PULLUP);

  stepperJ1.setMaxSpeed(5000);
  stepperJ1.setAcceleration(2000);
  stepperJ1.setSpeed(1500);

  while (digitalRead(LIMIT_SWITCH_PIN1) == LOW) 
  {
    stepperJ1.runSpeed();
    if (digitalRead(LIMIT_SWITCH_PIN1) == HIGH) break;
  }

  stepperJ1.setSpeed(-3000);
  stepperJ1.move(-8000);

  while (stepperJ1.distanceToGo() != 0) 
  {
    stepperJ1.runToPosition();
    stepperJ1.setCurrentPosition(0);
  }

  //back to original position
  stepperJ2.setMaxSpeed(5000);
  stepperJ2.setSpeed(1500);
  stepperJ2.moveTo(0);
  while (stepperJ2.distanceToGo() != 0) 
  {
    stepperJ2.runToPosition();
  }
}

void homeJ2() {
  pinMode(LIMIT_SWITCH_PIN2, INPUT_PULLUP);

  stepperJ2.setMaxSpeed(5000);
  stepperJ2.setAcceleration(2000);
  stepperJ2.setSpeed(1500);

  while (digitalRead(LIMIT_SWITCH_PIN2) == LOW)   
  {
    stepperJ2.runSpeed();
    if (digitalRead(LIMIT_SWITCH_PIN2) == HIGH) break;
  }

  stepperJ2.setSpeed(-3000);
  stepperJ2.move(-5500);

  while (stepperJ2.distanceToGo() != 0) 
  {
    stepperJ2.runToPosition();
    stepperJ2.setCurrentPosition(0);
  }

}

void homeJ4() {

  pinMode(LIMIT_SWITCH_PIN4, INPUT_PULLUP);

  stepperJ4.setMaxSpeed(5000);
  stepperJ4.setAcceleration(1000);
  stepperJ4.setSpeed(1500);

  while (digitalRead(LIMIT_SWITCH_PIN4) == LOW) 
  {
    stepperJ4.runSpeed();
    if (digitalRead(LIMIT_SWITCH_PIN4) == HIGH) break;
  }

  stepperJ4.setSpeed(-3000);
  stepperJ4.move(-1500);

  while (stepperJ4.distanceToGo() != 0) 
  {
    stepperJ4.runToPosition();
    stepperJ4.setCurrentPosition(0);
  }
}

void openGripper() 
{
  gripperServo.write(40); // Open position
  Serial.println("Gripper opened");
}

// Function to close the gripper
void closeGripper() 
{
  gripperServo.write(0); // Close position
  Serial.println("Gripper closed");
}

// FORWARD KINEMATICS
void forwardKinematics() 
{
  float theta1F = theta1 * PI / 180;  // degrees to radians
  float theta2F = theta2 * PI / 180;
  int xP = round(L1 * cos(theta1F) + L2 * cos(theta1F + theta2F));  //For finding EE co-ordinates
  int yP = round(L1 * sin(theta1F) + L2 * sin(theta1F + theta2F));
  Serial.print("X :");
  Serial.println(xP);
  Serial.print("Y :");
  Serial.println(yP);
}


void setup() 
{
  Serial.begin(9600);
  gripperServo.attach(A0);                                                              
  homing();
}

void loop() 
{
  // Wait for input from the user
  if (Serial.available() > 0) {
    float Z;
    char c = Serial.read();
    Serial.print("Received character: ");
    Serial.println(c);
    float startTime = millis();

    if(c == 'A')
    {
      theta1 = 90;
      theta2 = 110;
      Z = 0;
    }
    else if(c == 'B')
    {
      theta1 = 70;
      theta2 = 120;
      Z = 0;
    }
    else if(c == 'C')
    {
      theta1 = 50;
      theta2 = 125;
      Z = 0;
    }
    else if(c == 'D')
    {
      theta1 = -90;
      theta2 = -110;
      Z = 0;
    }

    else if(c == 'E')
    {
      theta1 = -70;
      theta2 = -125;
      Z = 0;
    }
    else if(c == 'F')
    {
      theta1 = -50;
      theta2 = -125;
      Z = 0;
    }
    else if(c == 'H')
    {
      theta1 = 0;
      theta2 = 0;
      Z = 0;
    }
    else if(c == 'O')
    {
      openGripper();
      Serial.println("Gripper open");
    }
    else if(c == 'P')
    {
      closeGripper();
      Serial.println("Gripper closed");
    }
    

    //Calculate the forward kinamatics
    forwardKinematics();
    stepperJ1.setMaxSpeed(16000);
    stepperJ2.setMaxSpeed(16000);
    stepperJ3.setMaxSpeed(8000);

    stepperJ1.setSpeed(20000);
    stepperJ2.setSpeed(20000);
    stepperJ3.setSpeed(6000);
    stepperJ1.setAcceleration(12000);
    stepperJ2.setAcceleration(12000);
    stepperJ3.setAcceleration(8000);

    //writing position to the steppers
    stepperJ1Position = theta1 * theta1AngleToSteps;
    stepperJ2Position = theta2 * theta2AngleToSteps;
    stepperJ3Position = Z * zDistanceToSteps;

    Serial.print("Z :");
    Serial.println(Z);

    stepperJ1.moveTo(stepperJ1Position);
    stepperJ2.moveTo(stepperJ2Position);
    stepperJ3.moveTo(stepperJ3Position);

    while (stepperJ1.currentPosition() != stepperJ1Position || stepperJ2.currentPosition() != stepperJ2Position || stepperJ3.currentPosition() != stepperJ3Position) {
      stepperJ1.run();
      stepperJ2.run();
      stepperJ3.run();
    }

    float endTime = millis();
    float elapsedTime = endTime - startTime;
    Serial.println("Time taken :");
    Serial.println(elapsedTime/1000);

    delay(100);
  }
}

